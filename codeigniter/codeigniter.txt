URLs
--------
La estructura típica de una URL de CI es dominio.com/index.php/controlador/metodo/parametro1/parametro2/parametroN...
index.php se puede omitir usando un fichero .htaccess.

Para ontener el segmento "n" de la URL
	$this->uri->segment(n);
Si le pasamos un valor extra como parámetro será el valor que tomará la variable asiganda en caso de que el segmento indicado no exista.
	$product_id = $this->uri->segment(3, 0);

Podemos añadir barras al final, al principio o en ambos con las siguientes funciones
	$this->uri->slash_segment(3);
	$this->uri->slash_segment(3, 'leading');
	$this->uri->slash_segment(3, 'both');
que devuelven respectivamente:
segment/
/segment
/segment/
(también tienen equivalente $this->uri->slash_rsegment(n))

Para transformar una URL en un array asociativo:
	$this->uri->uri_to_assoc(n);
Siendo n el offset, que por defecto es 3 para ignorar el nombre del controlador y el método.

Por ejemplo, para la url index.php/user/search/name/joe/location/UK/gender/male devovería
	array('name' => 'joe',    'location' => 'UK',    'gender' => 'male')
Si pasamos como tercer parámetro un array de claves esperadas el array devuelto siempre tendrá las claves incdicadas, incluso si no se encuentran el la URL. En caso de que una de las claves no esté presente el array devuelto tendrá dicha clave establecida en FALSE.
La función equivalente para URLs reenrutadas es $this->uri->ruri_to_assoc(n);


Para transformar un array asociativo en una URL
	$str = $this->uri->assoc_to_uri($array);


Para obtener la clase y el metodo actual
	$this->router->class
	$this->router->method

Para obtener la url base, sin incluir a index.php
	config_item('base_url')

Para obtener la url base, incluyendo a index.php
	$this->load->helper('url');
	site_url();
Los parametros que pasemos a site_url(), como cadena o  como array, serán añadidos a la url base

Para obtener la parte de la URL que no es la del dominio
	$this->uri->uri_string()
que para http://example.com/index.php/news/local/345 devolvería /news/local/345

La función equivalente para URLs reenrutadas es $this->uri->ruri_string(n)


CONTROLADORES
--------------------------
Se guardan en application/controllers/ (se pueden usar subdirectorios para una mejor organización)

Para definir el controlador por defecto editar en application/config/routes.php
$route['default_controller'] = 'Blog';

El nombre de la clase debe coincidir con el del archivo pero con la primera letra en mayúscula y todo lo demás en minúscula

class Blog extends Controller {

	//Constructor, útil para inicializar valores
	function __construct()
	{
		parent::Controller();
	}

	//La función index() se carga por defecto si el segundo segmento de la URI está vacío
	function index()
	{

	}
}

Para definir una función como privada (es decir, que no se pueda invocar desde la URI), hacer que su nombre empiece por "_"

Si la URL contiene más de dos segmentos éstos serán pasados a la función como parámetro.. Por ejemplo para la URL http://foobar.com/index.php/products/shoes/sandals/123 y la función
<?php
class Products extends Controller {

    function shoes($sandals, $id)
    {
        echo $sandals;
        echo $id;
    }
}
?>
La salida será: sandals 123


VISTAS
----------
Se guardan en application/views/ (se pueden usar subdirectorios para una mejor organización)

para cargarlas se llaman desde una función del controlador de la siguiente forma
$this->load->view('nombre');

Para pasar parámetros a una vista se hace añadiéndolos a un array y pasando ese array como segundo parámetro de load->view. Por ejemplo:
$data['page_title'] = 'Your title';
$this->load->view('nombre', $data);
Si usamos varias vistas para ahorrarse el paso de tener que incluir el segundo parámetro $data en cada llamada a load->view(), podemos usar la siguiente funcion que se encarga de añadir $data a todas las vistas
$this->load->vars($data);

Las vistas se pueden concatenar haciendo más de una llamada. Por ejemplo:
$data['page_title'] = 'Your title';
$this->load->view('header');
$this->load->view('menu');
$this->load->view('content', $data);
$this->load->view('footer');

Podemos hacer que en vez de enviar el contenido de una vista al navegador se guarde en una variable añadiendo a load->view un tercer parámetro "TRUE"
$string = $this->load->view('myfile', '', TRUE);


MODELOS
---------------
Se guardan en application/models/ (se pueden usar subdirectorios para una mejor organización).
El nombre del archivo debe estar en minúsculas. El nombre de la clase debe coincidir con el del archivo pero con la primera letra en mayúscula y todas las demás en minúscula.

class Model_name extends Model {

    function __construct()
    {
        parent::Model();
    }
}

Para cargarlos se llaman desde una función del controlador de la siguiente forma
$this->load->model('Model_name');

Una vez cargado, para acceder a las funciones
$this->Model_name->function();

Podemos renombrar el modelo al vuelo usando pasando un segundo parámetro en la carga:
$this->load->model('Model_name','my_model');
$this->my_model->function();

Nora: Cargar un modelo no implica realizar la conexión a la BD. Para hacer la conexión hay varias formas, explicadas en el apartado BASE DE DATOS.


HELPERS
-------------
Son una colección de funciones relacionadas que no dependen de otras funciones para funcionar. Se guardan en system/helpers o en application/helpers (se buscan en ese orden)

Se pueden cargar desde un controlador o una vista (aunque no es buena práctica cargarlos en las vistas). Una vez cargados se pueden acceder desde controladores y vistas.

Para cargarlos
$this->load->helper('name');
Para cargar más de uno a la vez
$this->load->helper( array('helper1', 'helper2', 'helper3') );

Para usarlos se hace como con cualquier función de PHP.

Para ampliar un helper existente, crear en el directorio application/helpers/ un archivo con nombre idéntico al del helper que queremos ampliar pero con prefijo "MY_". En dicho archivo ponemos nuestras funciones. Si la funciones ya existían en el helper, su comportamiento será sustituido por el de la nuestra. Si no existían nuestras funciones pasan a formar parte del helper.


HOOKs
----------
Los hooks sirven para ejecutar código nuestro en algún punto intermedio de las etapas (Diagrama  http://codeigniter.com/user_guide/overview/appflow.html) por las que pasa la ejecuión de cualquier página de CI.

Para activarlos, en application/config/config.php poner $config['enable_hooks'] = TRUE;

Los hooks se definen en application/config/hooks.php y su prototipo es:
$hook['pre_controller'] = array(
	'class'    => 'MyClass',
	'function' => 'Myfunction',
	'filename' => 'Myclass.php',
	'filepath' => 'hooks',
	'params'   => array('beer', 'wine', 'snacks')
	);
La clave del array (en el ejemplo 'pre_controller') indica en qué punto o etapa se insertará/ejecutará nuestro hook. La lista de etapas disponibles y el significado de los componentes del array está en http://codeigniter.com/user_guide/general/hooks.html


AUTOCARGA
------------------
Las cosas que necesitemos a lo largo de toda nuestra aplicación (Libraries,Helper files,Plugins,Custom config files,Language files,Models) podemos cargarlas en el fichero application/config/autoload.php


BASE DE DATOS
-----------------------
Para hacer la conexión hay varias formas, dependiendo de cuándo necesitamos conexión a la BD interesa usar unas u otras.
 -Si todas nuestras páginas van a necesitar conexión a la BD la forma más sencilla es poner en la autocarga(explicado más abajo) de librerías la palabra "database".
 -Si solo necesitemos  conexión a la BD en aquellas páginas en las que se carga el modelo, podemos indicar a que se conecte a la hora de cargar el modelo pasando un tercer parámetro "TRUE"
	$this->load->model('Model_name', '', TRUE);
 -Si solo algunas páginas necesitan conexión a la BD podemos llamar a
	$this->load->database(); desde cualquier función.

Para saber cómo funciona la clase de BD de CI consulta el archivo instruccionesBD.txt
Para saber cómo construir las consultas usando Active Record consulta el archivo instruccionesBDactiveRecord.txt


CACHÉ
----------
Para acelerar la carga de páginas se puede activar la caché
$this->output->cache(numero_de_minutos_en_los_que_caduca);
La llamada anterior puede ir en cualquier parte de una función y tiene efecto sin importar el orden en el que se llamen las funciones.

Para que funcione, el directorio system/cache debe tener permisos de escritura.


PROFILER
--------------
El profiler sirve para añadir en al parte de abajo de las páginas información de depuracion ($_GET,$_POST,...). Para uasrlo, añadir en cualquier parte del controlador (por ejemplo en el constructor)
$this->output->enable_profiler(TRUE);


INPUT (XSS Filtering, $_POST,$_COOKIE,$_SERVER)
-------------------------------------------------------------
Para acceder a $_POST,$_COOKIE,$_SERVER usar
$this->input->post('some_data')
$this->input->cookie('some_data')
$this->input->server('some_data')
Todas las funciones devuelven false en caso de que el dato no estuviese definido.

隆隆IMPORTANTE!! Filtrar contra XSS no implica evitar SQL Injection. Son cosas distintas. Una dato procedente de un usuario que se haya filtrado de XSS sigue siendo susceptible de contener una inyección SQL.

Para filtrar los datos POST o COOKIE contra ataques XSS se pueden hacer de 2 formas:
 - Filtrar un solo parámetro: $this->input->post('some_data',TRUE). Esto tambien se puede hacer usando la clase de validación de formularios $this->form_validation->set_rules('some_data', 'Some Data', 'xss_clean');
 - Filtrar todos los parámetros de forma automática cada vez que se encuentre un dato POST o COOKIE, activando el filtro de forma global en application/config/config.php con
$config['global_xss_filtering'] = TRUE; (por lo visto esto penaliza el rendimiento).

Para filtrar unos datos cuaquiera, por ejemplo $data
 $data = $this->input->xss_clean($data);
de esta forma $data se queda en un esatdo seguro.$data puede ser un array o un string.

Para filtrar imágenes contra ataques XSS, se pasa un segundo parámetro TRUE. En este caso lo que devuelve la fucnión no es el dato filtardo sino un booleano incicado si la imagen es segura o no.
if ($this->input->xss_clean($file, TRUE) === FALSE)
{
    // file failed the XSS test
}

Otras funciones de la clase input:
$this->input->ip_address(); Devuelve la IP del usuario.
$this->input->valid_ip($ip); Indica si la IP es correcta.
$this->input->user_agent();Devuelve el user agent


CONFIGURACIONES
----------------------------
La configuración por defecto de CI se guarda en application/config/config.php. Aunque podemos usar dicho fichero para añadir nuestra propia configuración, para no mezclar las cosas que incluye CI por defecto con las nuestras lo mejor es crearse un archivo nuevo en application/config/

Para cargar un archivo de configuración de forma manual, desde un controlador llamar a
$this->config->load('filename');
También existe un alias de la clase load:
$this->load->config('file_name');

Para cargarlo de forma automática y que esté disponible en todos los controladores, autocargarlo desde application/config/autoload.php usando $autoload['config'].

El formato de configuración usardo por CI consiste en guardar todas las configuraciones en un array llamado $config. Por ejemplo
$config['nombre_del_proyecto'] = 'MiProyecto';
Para recuperar un valor de un item de configuración usar
$this->config->item('nombre_del_proyecto');
o también (menos recomendado)
config_item('nombre_del_proyecto')

Todas las configuraciones cargadas de los diversos ficheros se unen en formado un solo array, el ya mencionado $config. Si en distintos ficheros tenemos nombres de clave de array repetidos se pueden producir colisiones. Para evitar las colisiones se peude añadir un segundo parámetro TRUE a $this->config->load() y en vez de mezclarse todos los itemes en el mismo array, se crearán "subarrays" cuya clave es el nombre del archivo de configuración. Esto es útil no solo para evitar colisiones sino también para tambien para agrupar items de configuración similares. Por ejemplo, si nos creamos el archivo de configuración css.php con este aspecto:
$config['foreground_color'] = 'red';
$config['background_color'] = 'blue';

Podemos usar lo siguiente:
$this->config->load('css', TRUE);
$this->config->item('css','foreground_color');
$this->config->item('css','background_color');

Como alternativa al array de configuración de CI, podemos usar constantes de la misma forma que ya hago en mis proyextos web anteriores:
Si en un archivo dentro de application/config/ pones algo como:
define('FOREGROUND_COLOR', 'red');
luego desde una vista o un controlador puedes usar
echo FOREGROUND_COLOR;



CIFRADO
------------
Esta clase permite cifrar datos de forma reversible. Si compilamos PHP con la USE="crypt" tendremos un cifrado extra.

Para poder usarla lo primero es establecer una clave de cifrado en application/config/config.php
$config['encryption_key'] = 'jMUd73Hnd74YcdjpjfLR230Npdsfgpa7';
Se recomienda que sea lo más aleatoria posible y que tenga al menos 32 caracteres de longitud.

Para usarla, poner en el controlador
$this->load->library('encrypt');
(También puede ser autocargada).

Para cifrar:
$encrypted_string = $this->encrypt->encode('Esto es super secreto');
Si queremos usar una clave cifrado distinta de la definda en la configuración, podemos pasarla como segundo parámetro.

Es importante saber que la frase cifrada ocupará más o menos 2.6 veces la longitud de la frase sin cifrar, por lo que hay que tenerlo en cuenta a la hora de definir la estructura de datos que almacenará la frase cifrada.

Para descifrar:
$plaintext_string = $this->encrypt->decode($encrypted_string);


SESIONES
--------------
CI no usa el sistema de sesiones de PHP, sino uno propio más 驴flexible?.(por lo visto da muchas problemas con IE)

Para usarlas, poner en el constructor del controlador
$this->load->library('session');

También puede ser autocargada
$autoload['libraries'] = array('session');

Para que los datos de sesión se guarden cifrados, configurar en config.php una clave de cifardo (consultar apartado CIFRADO) y establecer
$config['sess_encrypt_cookie']	= TRUE;

Para recuperar datos:
$this->session->userdata('item');

Para añadir datos a la sesión:
$this->session->set_userdata('item', 'value');
o también
$this->session->set_userdata(array('item1' => 'value','item2' => 'value2'));

Para eliminar datos:
$this->session->unset_userdata('some_name');
o también
$this->session->unset_userdata(array('item1' => '','item2' => '')); (los valores no se necesitan, solo las claves del array).

Para destruir la sesión:
$this->session->sess_destroy();

Existe un tipo de datos de sesión especial llamado "Variable Flash" que consiste en que estabelcemos una variable y solo estará disponible en la siguiente petición del servidor, luego se borra automáticamente. Esto es muy útil para dar información tipo "Usuario añadido" o "Dos registros eliminados".

Para añadir datos a la flash:
$this->session->set_flashdata('item', 'value');
o también usando una array como los datos de sesión normales


